import { getPagination } from "../helpers/getPagination";
import { responseError, responseSuccess } from "../helpers/response";
import cartModel from "../models/cart.model";

export const getAll = async (req, res) => {
  try {
    const { query } = req;
    console.log("üöÄ ~ query:", query);

    // const { isPagination, ...pagination } = await getPagination(
    //   cartModel,
    //   query
    // );

    // const product = await cartModel.read(query, false);

    const [cartRoom, cartProduct] = await Promise.all([
      cartModel.getCartRoomByUserId(query.user_id),
      cartModel.getCartProductByUserId(query.user_id),
    ]);

    console.log("üöÄ ~ cartProduct:", cartProduct);
    console.log("üöÄ ~ cartRoom:", cartRoom);

    const data = {
      message: "L·∫•y danh s√°ch th√†nh c√¥ng.",
      data: {
        cartRoom,
        cartProduct,
      },
    };
    responseSuccess(res, data);
  } catch (error) {
    return responseError(res, error);
  }
};
// export const create = async (req, res) => {
//   try {
//     const body = req.body;

//     const result = await cartModel.create(body);

//     const response = {
//       data: result,
//       message: "T·∫°o m·ªõi s·∫£n ph·∫©m th√†nh c√¥ng",
//     };
//     responseSuccess(res, response);
//   } catch (error) {
//     return responseError(res, error);
//   }
// };
export const create = async (req, res) => {
  try {
    const { user_id, product_id, room_id, type, quantity } = req.body;

    // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng n·∫øu t·ªìn t·∫°i, n·∫øu kh√¥ng th√¨ ch√®n m·ªõi
    let updateQuery;
    const updateParams = [user_id]; // Kh·ªüi t·∫°o params v·ªõi user_id

    if (type === 0) {
      // Type 0 cho s·∫£n ph·∫©m
      updateQuery = `
        UPDATE cart
        SET quantity = quantity + ?
        WHERE user_id = ? AND product_id = ? AND type = 0;
      `;
      updateParams.push(quantity, product_id); // Th√™m quantity v√† product_id v√†o params
    } else if (type === 1) {
      // Type 1 cho ph√≤ng
      updateQuery = `
        UPDATE cart
        SET quantity = quantity + ?
        WHERE user_id = ? AND room_id = ? AND type = 1;
      `;
      updateParams.push(quantity, room_id); // Th√™m quantity v√† room_id v√†o params
    }

    // Th·ª±c hi·ªán c·∫≠p nh·∫≠t
    const [updateResult] = await cartModel.connection
      .promise()
      .query(updateQuery, updateParams);

    // Ki·ªÉm tra xem c√≥ b·∫£n ghi n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t kh√¥ng
    if (updateResult.affectedRows === 0) {
      // Ch√®n b·∫£n ghi m·ªõi n·∫øu kh√¥ng c√≥ b·∫£n ghi n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t
      let insertQuery = `
        INSERT INTO cart (user_id, product_id, quantity, type, room_id, created_at)
        VALUES (?, ?, ?, ?, ?, NOW());
      `;

      // Ch√®n n·∫øu c·∫ßn
      await cartModel.connection
        .promise()
        .query(insertQuery, [
          user_id,
          product_id,
          quantity,
          type,
          type === 1 ? room_id : null,
        ]);
    }

    const response = {
      message: "Thao t√°c th√†nh c√¥ng",
    };
    return responseSuccess(res, response);
  } catch (error) {
    console.error("Error:", error);
    return responseError(res, error);
  }
};

export const update = async (req, res) => {
  try {
    const { id } = req.params;
    const body = req.body;
    const updatedCategory = await cartModel.update("id", id, body);
    const response = {
      message: "C·∫≠p nh·∫≠t d·ªØ li·ªáu th√†nh c√¥ng",
      data: updatedCategory,
    };
    return responseSuccess(res, response);
  } catch (error) {
    return responseError(res, error);
  }
};

export const findById = async (req, res) => {
  try {
    const { id } = req.params;
    const category = await cartModel.findOne({ id });

    if (!category) {
      return responseNotFound(res);
    }

    const data = {
      message: "L·∫•y d·ªØ li·ªáu th√†nh c√¥ng",
      data: category,
    };
    return responseSuccess(res, data);
  } catch (error) {
    return responseError(res, error);
  }
};

export const deleteById = async (req, res) => {
  try {
    const { id } = req.params;
    const category = await cartModel.delete(id);
    const data = {
      message: "X√≥a d·ªØ li·ªáu th√†nh c√¥ng",
      data: category,
    };
    return responseSuccess(res, data);
  } catch (error) {
    return responseError(res, error);
  }
};
