import { roles } from "../config/roles";
import { getPagination } from "../helpers/getPagination";
import { responseError, responseSuccess } from "../helpers/response";

import usersModel from "../models/users.model";

export const login = async (req, res) => {
  try {
    res.status(200).json({ message: "Login success", error });
  } catch (error) {
    res.status(200).json({ message: "Login failed", error });
  }
};

export const getAll = async (req, res) => {
  try {
    const { query } = req;

    const { isPagination, ...pagination } = await getPagination(
      usersModel,
      query
    );

    const users = await usersModel.read(res, isPagination);

    const data = {
      message: "L·∫•y danh s√°ch th√†nh c√¥ng.",
      data: users,
      pagination,
    };

    responseSuccess(res, data);
  } catch (error) {
    return responseError(res, error);
  }
};

export const create = async (req, res) => {
  try {
    const { password, ...remainBody } = req.body;

    const hashPassword = await usersModel.bcryptPassword(password);

    const data = {
      ...remainBody,
      password: hashPassword,
      is_vip: 1,
      user_type: roles.USER,
    };

    const user = await usersModel.create(data);
    return responseSuccess(res, user);
  } catch (error) {
    return responseError(res, error);
  }
};

export const findById = async (req, res) => {
  try {
    const { id } = req.params;
    const user = await usersModel.findOne(res, "id", id);

    const data = {
      message: "L·∫•y d·ªØ li·ªáu th√†nh c√¥ng",
      data: await user,
    };
    console.log(data);
    return responseSuccess(res, data);
  } catch (error) {
    return responseError(res, error);
  }
};

export const authorization = () => {
  try {
  } catch (error) {
    res.status(400).json({ message: "wrong Token", error });
  }
};

export const getAllUser = async (req, res) => {
  try {
    let conditions = [];
    const { name, is_vip, page = 1, pageSize = 10 } = req.query;

    // ƒêi·ªÅu ki·ªán l·ªçc cho name v√† is_vip
    if (name) {
      conditions.push(`username LIKE '%${name}%'`);
    }
    if (is_vip !== undefined) {
      conditions.push(`is_vip = ${is_vip}`);
    }

    // C√¢u ƒëi·ªÅu ki·ªán WHERE n·∫øu c√≥ c√°c ƒëi·ªÅu ki·ªán l·ªçc
    const searchable =
      conditions.length > 0 ? `WHERE ${conditions.join(" AND ")}` : "";

    // C√¢u truy v·∫•n SQL ƒë·ªÉ l·∫•y d·ªØ li·ªáu ph√¢n trang
    const offset = (page - 1) * pageSize;
    const limit = `LIMIT ${pageSize} OFFSET ${offset}`;
    const query = `SELECT * FROM user ${searchable} ORDER BY created_at DESC ${limit}`;
    console.log("üöÄ ~ query:", query);

    // Th·ª±c hi·ªán truy v·∫•n ƒë·ªÉ l·∫•y d·ªØ li·ªáu
    const result = await new Promise((resolve, reject) => {
      usersModel.connection.query(query, (error, result) => {
        if (error) {
          reject(error);
        } else {
          resolve(result || []);
        }
      });
    });

    // C√¢u truy v·∫•n SQL ƒë·ªÉ l·∫•y t·ªïng s·ªë b·∫£n ghi
    const countQuery = `SELECT COUNT(*) AS total FROM user ${searchable}`;
    const totalCountResult = await new Promise((resolve, reject) => {
      usersModel.connection.query(countQuery, (error, result) => {
        if (error) {
          reject(error);
        } else {
          resolve(result[0]?.total || 0);
        }
      });
    });

    // T√≠nh to√°n t·ªïng s·ªë trang
    const totalPages = Math.ceil(totalCountResult / pageSize);

    // G·ª≠i d·ªØ li·ªáu ph·∫£n h·ªìi th√†nh c√¥ng
    const data = {
      message: "L·∫•y d·ªØ li·ªáu th√†nh c√¥ng",
      data: result,
      pagination: {
        totalCount: totalCountResult,
        totalPages,
        currentPage: Number(page),
        pageSize: Number(pageSize),
      },
    };

    return responseSuccess(res, data); // Gi·∫£ s·ª≠ responseSuccess l√† m·ªôt h√†m g·ª≠i ph·∫£n h·ªìi th√†nh c√¥ng
  } catch (error) {
    console.log("error: ", error);
    return res.status(400).json({ message: "ƒê√£ c√≥ l·ªói x·∫£y ra!!!", error });
  }
};

export const getUserDetail = async (req, res) => {
  try {
    const { id } = req.params; // L·∫•y id t·ª´ tham s·ªë ƒë∆∞·ªùng d·∫´n

    // Ki·ªÉm tra n·∫øu id kh√¥ng ƒë∆∞·ª£c cung c·∫•p
    if (!id) {
      return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá" });
    }

    // C√¢u truy v·∫•n SQL ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng
    const query = `SELECT * FROM user WHERE id = ?`;
    console.log("üöÄ ~ query:", query);

    // Th·ª±c hi·ªán truy v·∫•n ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    const result = await new Promise((resolve, reject) => {
      usersModel.connection.query(query, [id], (error, result) => {
        if (error) {
          reject(error);
        } else {
          resolve(result[0] || null); // Ch·ªâ l·∫•y m·ªôt ng∆∞·ªùi d√πng
        }
      });
    });

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i hay kh√¥ng
    if (!result) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // G·ª≠i d·ªØ li·ªáu ph·∫£n h·ªìi th√†nh c√¥ng
    const data = {
      message: "L·∫•y d·ªØ li·ªáu th√†nh c√¥ng",
      data: result,
    };

    return responseSuccess(res, data);
  } catch (error) {
    console.log("error: ", error);
    return res.status(500).json({ message: "ƒê√£ c√≥ l·ªói x·∫£y ra!!!", error });
  }
};
